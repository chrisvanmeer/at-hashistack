---
- name: Create fact of admin password.
  ansible.builtin.set_fact:
    admin_password: "{{ lookup('file', vault_admin_local_path) }}"
  delegate_to: localhost
  run_once: true
  tags: backup

- name: Login to Vault
  delegate_to: "{{ groups['vault_servers'] | first }}"
  when: ansible_hostname in groups['vault_servers']
  run_once: true
  tags: backup
  block:
    - name: Retrieve client token.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/userpass/login/{{ vault_admin_username }}"
        method: POST
        body_format: json
        body: '{ "password": "{{ admin_password }}" }'
        status_code:
          - 200
          - 204
        validate_certs: false
      register: vault_admin_login_response

    - name: Set fact of client token.
      ansible.builtin.set_fact:
        admin_token: "{{ vault_admin_login_response.json.auth.client_token }}"

    - name: Ensure snapshot policy
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/policy/{{ vault_snapshot_policy_name }}"
        headers:
          X-Vault-Token: "{{ admin_token }}"
        method: POST
        body_format: json
        body: '{ "policy": "path \"sys/storage/raft/snapshot\" { capabilities = [\"read\"] }" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Ensure approle secrets engine
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/auth/{{ vault_snapshot_approle_path }}"
        headers:
          X-Vault-Token: "{{ admin_token }}"
        method: POST
        body_format: json
        body: '{ "type": "approle" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Ensure approle snapshot role
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/{{ vault_snapshot_approle_path }}/role/{{ vault_snapshot_approle_role_name }}"
        headers:
          X-Vault-Token: "{{ admin_token }}"
        method: POST
        body_format: json
        body: '{ "token_policies": "[\"{{ vault_snapshot_policy_name }}\"]", "token_num_uses": 1, "token_ttl": "10m", "token_max_ttl": "10m" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Read approle Role ID
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/{{ vault_snapshot_approle_path }}/role/{{ vault_snapshot_approle_role_name }}/role-id"
        headers:
          X-Vault-Token: "{{ admin_token }}"
        method: GET
        body_format: json
        status_code:
          - 200
          - 204
        validate_certs: false
      register: snapshot_approle_role_id

    - name: Generate approle Secret ID
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/{{ vault_snapshot_approle_path }}/role/{{ vault_snapshot_approle_role_name }}/secret-id"
        headers:
          X-Vault-Token: "{{ admin_token }}"
        method: POST
        body_format: json
        status_code:
          - 200
          - 204
        validate_certs: false
      register: snapshot_approle_secret_id

    - name: Store tokens local for safekeeping.
      ansible.builtin.lineinfile:
        line: |
          Role ID - {{ snapshot_approle_role_id.json.data.role_id }}
          Secret ID - {{ snapshot_approle_role_id.json.data.secret_id }}
        dest: "{{ vault_snapshot_token_local_path }}"
        mode: 0644
      become: false
      delegate_to: localhost

    - name: end play
      meta: end_play
# Maak een approle role aan
# vault write auth/shapshot/role/backup \
#   token_num_uses=1 \
#   token_ttl=10m \
#   token_max_ttl=10m \
#   token_policies=pol-snapshot
# Vraag role-id op en schrijf naar local disk
# Vraag secret-id op en schrijf naar local disk
# Maak directory structuur aan
# Template de backup job
# Cron de backup job

# - name: Retrieve Secret ID from bootstrap output.
#   ansible.builtin.shell: "awk '/SecretID/ {print $2}' {{ consul_bootstrap_token_local_path }}"
#   changed_when: false
#   become: false
#   delegate_to: localhost
#   run_once: true
#   register: consul_acl_bootstrap_output
#   tags: backup

# - name: Read Snapshot policy
#   ansible.builtin.shell: "{{ consul_binary }} acl policy create -read {{ consul_snapshot_policy_name }} | awk '/Name/ {print $2}'"
#   environment:
#     CONSUL_HTTP_ADDR: "{{ consul_address }}"
#     CONSUL_HTTP_TOKEN: "{{ consul_acl_bootstrap_secret_id }}"
#   changed_when: false
#   register: consul_acl_policy_read_snapshot
#   delegate_to: "{{ groups['consul_servers'] | first }}"
#   run_once: true

# - name: Snapshots ACL - Creation.
#   delegate_to: "{{ groups['consul_servers'] | first }}"
#   run_once: true
#   block:
#     - name: Ensure the Snapshot policy file is in place.
#       ansible.builtin.copy:
#         src: "{{ consul_snapshot_policy_file_local }}"
#         dest: "{{ consul_snapshot_policy_file_remote }}"
#         mode: 0644

#     - name: Ensure that the policy is present in Consul.
#       ansible.builtin.command: "{{ consul_binary }} acl policy create -name {{ consul_snapshot_policy_name }} -rules @{{ consul_snapshot_policy_file_name }}"
#       environment:
#         CONSUL_HTTP_ADDR: "{{ consul_address }}"
#         CONSUL_HTTP_TOKEN: "{{ consul_acl_bootstrap_output.stdout }}"
#       args:
#         chdir: "{{ consul_data_directory }}/"
#       changed_when: false
#       ignore_errors: true

#     - name: Create ACL token using the above policy.
#       ansible.builtin.command: "{{ consul_binary }} acl token create -description '{{ consul_snapshot_policy_description }}' -policy-name {{ consul_snapshot_policy_name }}"
#       environment:
#         CONSUL_HTTP_ADDR: "{{ consul_address }}"
#         CONSUL_HTTP_TOKEN: "{{ consul_acl_bootstrap_output.stdout }}"
#       changed_when: false
#       register: snapshot_policy_token_output_raw

#     - name: Cleanup the placed policy file.
#       ansible.builtin.file:
#         path: "{{ consul_snapshot_policy_file_remote }}"
#         state: absent

#     - name: Store bootstrap token local for safekeeping.
#       ansible.builtin.copy:
#         content: "{{ snapshot_policy_token_output_raw.stdout }}"
#         dest: "{{ consul_snapshot_token_local_path }}"
#         mode: 0644
#       become: false
#       delegate_to: localhost

#   when:
#     - not consul_acl_policy_read_snapshot.stdout == consul_snapshot_policy_name

# - name: Retrieve Secret ID from bootstrap output.
#   ansible.builtin.shell: "awk '/SecretID/ {print $2}' {{ consul_snapshot_token_local_path }}"
#   changed_when: false
#   become: false
#   delegate_to: localhost
#   register: snapshot_token_output
#   run_once: true
#   tags: backup

# - name: Snapshot setup.
#   block:
#     - name: Ensure backup directories are present.
#       ansible.builtin.file:
#         path: "{{ item }}"
#         state: directory
#         mode: 0700
#         owner: "{{ consul_snapshot_backup_location_owner }}"
#         group: "{{ consul_snapshot_backup_location_group }}"
#       with_items:
#         - "{{ consul_snapshot_backup_main }}"
#         - "{{ consul_snapshot_backup_location }}"

#     - name: Ensure snapshot batch file is present.
#       ansible.builtin.template:
#         src: "{{ consul_snapshot_batchfile_template }}"
#         dest: "{{ consul_snapshot_batchfile_location }}"
#         owner: "{{ consul_snapshot_backup_location_owner }}"
#         group: "{{ consul_snapshot_backup_location_group }}"
#         mode: 0700

#     - name: Ensure crontab for snapshot is present.
#       ansible.builtin.cron:
#         name: "Consul Snapshots"
#         minute: "{{ consul_snapshot_cron_backup_minute }}"
#         hour: "{{ consul_snapshot_cron_backup_hour }}"
#         job: "{{ consul_snapshot_batchfile_location }} > /dev/null"
#         user: "{{ consul_snapshot_backup_location_owner }}"
#         state: present
#   tags: backup
