---
- name: Ensure TLS directory is present.
  become: true
  ansible.builtin.file:
    path: "{{ vault_tls_directory }}"
    state: directory
    recurse: true
  when: ansible_hostname in groups['vault_servers']

- name: Check if CA file already exists.
  ansible.builtin.stat:
    path: "{{ vault_ssl_ca_dest }}"
  register: ca_already_exists
  when: ansible_hostname in groups['vault_servers']

- name: Create PKI infrastructure on first server.
  when:
    - not ca_already_exists.stat.exists
    - ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true
  block:
    - name: Create private key.
      community.crypto.openssl_privatekey:
        path: "{{ vault_ssl_ca_key_dest }}"
        owner: "root"
        group: "root"
        mode: "0640"

    - name: Create certificate signing request (CSR) for CA certificate.
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ vault_ssl_ca_key_dest }}"
        common_name: "{{ vault_ssl_ca_common_name }}"
        use_common_name_for_san: false
        basic_constraints:
          - "CA:TRUE"
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR.
      community.crypto.x509_certificate:
        path: "{{ vault_ssl_ca_dest }}"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ vault_ssl_ca_key_dest }}"
        provider: selfsigned
      register: ca_certificate

## Server certificate
- name: Create server certificates.
  # delegate_to: "{{ groups['vault_servers'] | first }}"
  when:
    - ansible_hostname in groups['vault_servers']
    - not ca_already_exists.stat.exists
  # run_once: true
  block:
    - name: Create private key for server certificate.
      community.crypto.openssl_privatekey:
        path: "{{ vault_ssl_key_dest }}"
        owner: "root"
        group: "vault"
        mode: "0640"

    - name: Retrieve private key contents.
      ansible.builtin.slurp:
        src: "{{ vault_ssl_key_dest }}"
      register: keyfile

    - name: Create certificate signing request (CSR) for server certificate.
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ vault_ssl_key_dest }}"
        common_name: "{{ vault_ssl_server_common_name }}"
        subject_alt_name: "{{ vault_ssl_server_subject_alt_names }}"
      register: csr

    - name: Check whether certificate exists.
      ansible.builtin.stat:
        path: "{{ vault_ssl_cert_dest }}"
      register: certificate_exists

    - name: Read existing certificate if exists.
      ansible.builtin.slurp:
        src: "{{ vault_ssl_cert_dest }}"
      when: certificate_exists.stat.exists
      register: certificate

    - name: Sign certificate with our CA.
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate.content | b64decode) if certificate_exists.stat.exists else omit }}"
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{ vault_ssl_ca_dest }}"
        ownca_privatekey_path: "{{ vault_ssl_ca_key_dest }}"
        ownca_not_after: "+1826d"
      register: certificate
      delegate_to: "{{ groups['vault_servers'] | first }}"

    - name: Write certificate file.
      ansible.builtin.copy:
        dest: "{{ vault_ssl_cert_dest }}"
        content: "{{ certificate.certificate }}"
        owner: "root"
        group: "root"
        mode: "0644"
      when: certificate is changed

## Distribute the CA certificate to the rest of the environment
- name: Retrieve Content.
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true
  block:
    - name: Retrieve CA certificate contents.
      ansible.builtin.slurp:
        src: "{{ vault_ssl_ca_dest }}"
      register: ca_certificate_slurp
    # - name: Retrieve Server certificate contents.
    #   ansible.builtin.slurp:
    #     src: "{{ vault_ssl_cert_dest }}"
    #   register: server_certificate_slurp
    # - name: Retrieve Server key contents.
    #   ansible.builtin.slurp:
    #     src: "{{ vault_ssl_key_dest }}"
    #   register: server_key_slurp

- name: Place Content.
  when:
    - ansible_hostname in groups['vault_servers']
    - ansible_hostname != groups['vault_servers'] | first
  block:
    - name: Place CA certificate in default location.
      ansible.builtin.copy:
        dest: "{{ vault_ssl_ca_dest }}"
        content: "{{ ca_certificate_slurp.content | b64decode }}"
        owner: "root"
        group: "root"
        mode: "0644"
    # - name: Place certificate in default location.
    #   ansible.builtin.copy:
    #     dest: "{{ vault_ssl_cert_dest }}"
    #     content: "{{ server_certificate_slurp.content | b64decode }}"
    #     owner: "root"
    #     group: "root"
    #     mode: "0644"
    # - name: Place key in default location.
    #   ansible.builtin.copy:
    #     dest: "{{ vault_ssl_key_dest }}"
    #     content: "{{ server_key_slurp.content | b64decode }}"
    #     owner: "root"
    #     group: "vault"
    #     mode: "0640"

- name: Ensure the CA certificate is copied to the local certs directory - Debian.
  ansible.builtin.copy:
    dest: "/usr/local/share/ca-certificates/{{ vault_ssl_ca_share_filename }}"
    content: "{{ ca_certificate_slurp.content | b64decode }}"
    mode: 0644
  when: ansible_os_family == 'Debian'

- name: Ensure the CA certificate is copied to the local certs directory - RedHat.
  ansible.builtin.copy:
    dest: "/etc/pki/ca-trust/source/anchors/{{ vault_ssl_ca_share_filename }}"
    content: "{{ ca_certificate_slurp.content | b64decode }}"
    mode: 0644
  when: ansible_os_family == 'RedHat'

- name: Ensure certificate index is updated - Debian.
  ansible.builtin.command: "/usr/sbin/update-ca-certificates -f"
  when: ansible_os_family == 'Debian'

- name: Ensure certificate index is updated - RedHat.
  ansible.builtin.command: "/usr/bin/update-ca-trust extract"
  when: ansible_os_family == 'RedHat'
