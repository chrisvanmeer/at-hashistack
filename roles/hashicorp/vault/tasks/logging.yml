---
- name: Retrieve client token.
  ansible.builtin.uri:
    url: "{{ vault_address }}/v1/auth/userpass/login/{{ vault_admin_username }}"
    method: POST
    body_format: json
    body: '{ "password": "{{ admin_password }}" }'
    status_code:
      - 200
      - 204
    validate_certs: false
  register: vault_admin_login_response
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true

- name: Set fact of client token.
  ansible.builtin.set_fact:
    admin_token: "{{ vault_admin_login_response.json.auth.client_token }}"

- name: Ensure logrotate file for Vault is present.
  ansible.builtin.template:
    src: "{{ vault_log_template_local }}"
    dest: "{{ vault_log_rotate_dir }}/{{ vault_log_rotate_filename }}"
    mode: 0644
  when: ansible_hostname in groups['vault_servers']

- name: Ensure file auditing is enabled.
  ansible.builtin.command: "{{ vault_binary }} audit enable file file_path={{ vault_log_location }}"
  environment:
    VAULT_ADDR: "{{ vault_address }}"
    VAULT_CACERT: "{{ vault_ssl_ca_dest }}"
    VAULT_SKIP_VERIFY: "true"
    VAULT_TOKEN: "{{ admin_token }}"
  changed_when: false
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true
  ignore_errors: true

- name: Ensure syslog auditing is enabled.
  ansible.builtin.command: "{{ vault_binary }} audit enable syslog tag='{{ vault_syslog_tag }}' facility='{{ vault_syslog_facility }}'"
  environment:
    VAULT_ADDR: "{{ vault_address }}"
    VAULT_CACERT: "{{ vault_ssl_ca_dest }}"
    VAULT_SKIP_VERIFY: "true"
    VAULT_TOKEN: "{{ admin_token }}"
  changed_when: false
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true
  ignore_errors: true
