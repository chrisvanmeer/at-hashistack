---
- name: Include Consul vars.
  include_vars: ../../consul/vars/main.yml

- name: ACL - Check if system is already bootstrapped.
  ansible.builtin.stat:
    path: "{{ vault_bootstrapped_true_file }}"
  register: vault_bootstrapped
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true

- name: ACL - Check if Consul has ACL mode enabled.
  ansible.builtin.shell: "cat {{ consul_etc_directory }}/consul.hcl | grep -a3 '^acl' | grep enabled | awk '{print $3}'"
  changed_when: false
  ignore_errors: true
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true
  register: consul_acl_enabled

- name: ACL
  block:
    - name: ACL - Ensure the Vault service policy file is in place.
      ansible.builtin.copy:
        src: "{{ vault_service_policy_file_local }}"
        dest: "{{ vault_service_policy_file_remote }}"
        mode: 0644

    - name: ACL - Retrieve Secret ID from bootstrap output.
      ansible.builtin.shell: "awk '/SecretID/ {print $2}' {{ consul_bootstrap_token_local_path }}"
      changed_when: false
      become: false
      delegate_to: localhost
      register: consul_acl_bootstrap_output

    - name: ACL - Set the Secret ID as a fact.
      ansible.builtin.set_fact:
        consul_acl_bootstrap_secret_id: "{{ consul_acl_bootstrap_output.stdout }}"

    - name: ACL - Ensure that the ACL is present in Consul.
      ansible.builtin.command: "{{ consul_binary }} acl policy create -name {{ vault_consul_service_name }} -rules @{{ vault_service_policy_file_name }}"
      environment:
        CONSUL_HTTP_ADDR: "{{ consul_address }}"
        CONSUL_HTTP_TOKEN: "{{ consul_acl_bootstrap_secret_id }}"
      args:
        chdir: "{{ vault_data_directory }}/"
      changed_when: false

    - name: ACL - Create ACL token using the above policy.
      ansible.builtin.command: "{{ consul_binary }} acl token create -description '{{ vault_consul_service_description }}' -policy-name {{ vault_consul_service_name }}"
      environment:
        CONSUL_HTTP_ADDR: "{{ consul_address }}"
        CONSUL_HTTP_TOKEN: "{{ consul_acl_bootstrap_secret_id }}"
      changed_when: false
      register: vault_acl_bootstrap_raw

    - name: Store bootstrap token local for safekeeping.
      ansible.builtin.copy:
        content: "{{ vault_acl_bootstrap_raw.stdout }}"
        dest: "{{ vault_bootstrap_token_local_path }}"
        mode: 0644
      become: false
      delegate_to: localhost

    - name: Retrieve Secret ID from bootstrap output.
      ansible.builtin.shell: "awk '/SecretID/ {print $2}' {{ vault_bootstrap_token_local_path }}"
      changed_when: false
      become: false
      delegate_to: localhost
      register: vault_acl_bootstrap_output

    - name: Set the Secret ID as a fact.
      ansible.builtin.set_fact:
        vault_acl_bootstrap_secret_id: "{{ vault_acl_bootstrap_output.stdout }}"

    - name: Ensure bootstrap check file is in place.
      ansible.builtin.copy:
        dest: "{{ vault_bootstrapped_true_file }}"
        content: "This cluster was bootstrapped on {{ ansible_date_time.date }} {{ ansible_date_time.time }}{{ ansible_date_time.tz }}.\n"
        mode: 0644

    - name: Cleanup generated files which are not needed anymore.
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ vault_service_policy_file_remote }}"

  when:
    - consul_acl_enabled.stdout == "true"
    - not vault_bootstrapped.stat.exists
    - ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true

- name: Ensure Vault Service Token is set in config file.
  ansible.builtin.lineinfile:
    path: "{{ vault_etc_directory }}/vault.hcl"
    regexp: '# token         = "<VAULT_SERVICE_TOKEN_WILL_BE_FILLED_LATER>"'
    line: '  token         = "{{ vault_acl_bootstrap_secret_id }}"'
  when:
    - ansible_hostname in groups['vault_servers'] or ansible_hostname in groups['vault_clients']
