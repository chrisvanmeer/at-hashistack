---
- name: Check if there is already a second root token.
  ansible.builtin.stat:
    path: "{{ vault_bootstrap_root_true_file }}"
  register: vault_bootstrap_root_true_file_status
  when: ansible_hostname in groups['vault_servers']
  delegate_to: "{{ groups['vault_servers'] | first }}"
  run_once: true

- name: Check the Vault sealed status.
  ansible.builtin.shell: "{{ vault_binary }} status | grep -i sealed | awk '{print $2}'"
  environment:
    VAULT_ADDR: "{{ vault_address }}"
    VAULT_CACERT: "{{ vault_ssl_ca_dest }}"
    VAULT_SKIP_VERIFY: "true"
  changed_when: false
  register: vault_is_sealed
  when: ansible_hostname in groups['vault_servers']

- name: Retrieve Initial Root Token from local file.
  ansible.builtin.shell: "awk '/Initial Root Token/ {print $4}' {{ vault_bootstrap_init_local_path }}"
  register: vault_initial_root_token
  changed_when: false
  delegate_to: localhost
  become: false
  run_once: true

- name: Admin user creation.
  when:
    - not vault_bootstrap_root_true_file_status.stat.exists
    - ansible_hostname in groups['vault_servers']
  run_once: true
  block:
    - name: Ensure admin-policy is in place.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/policy/{{ vault_admin_policy_name }}"
        method: PUT
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "policy": "path \"*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"] }" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Ensure userpass auth engine is enabled and mounted.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/auth/userpass"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "type": "userpass" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Create a random password.
      ansible.builtin.set_fact:
        random_password: "{{ lookup('password', '{{ vault_admin_local_path }} chars=ascii_letters,digits length=20') }}"
      become: false

    - name: Ensure admin user is created.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/userpass/users/{{ vault_admin_username }}"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "password": "{{ random_password }}" }'
        status_code:
          - 200
          - 204
        validate_certs: false

    - name: Retrieve userpass mount accessor.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        return_content: true
        validate_certs: false
      register: mount_accessor_raw

    - name: Set a fact with the mount accessor.
      ansible.builtin.set_fact:
        mount_accessor: "{{ mount_accessor_raw['json']['data']['userpass/']['accessor'] }}"

    - name: Create the admin-user entity.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/identity/entity"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "name": "{{ vault_admin_username }}-entity" }'
        status_code:
          - 200
          - 204
        return_content: true
        validate_certs: false
      register: entity_raw

    - name: Set a fact with the entity ID.
      ansible.builtin.set_fact:
        entity_id: "{{ entity_raw['json']['data']['id'] }}"

    - name: Create the admin-user-entity alias.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/identity/entity-alias"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "name": "{{ vault_admin_username }}", "canonical_id": "{{ entity_id }}", "mount_accessor": "{{ mount_accessor }}" }'
        status_code:
          - 200
          - 204
        return_content: true
        validate_certs: false
      register: entity_alias_raw

    - name: Ensure admin-group is present
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/identity/group"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_initial_root_token.stdout }}"
        body_format: json
        body: '{ "name": "{{ vault_admin_group_name }}", "policies": ["{{ vault_admin_policy_name }}"], "member_entity_ids": ["{{ entity_id }}"] }'
        status_code:
          - 200
          - 204
        validate_certs: false

- name: Create fact of admin password.
  ansible.builtin.set_fact:
    admin_password: "{{ lookup('file', vault_admin_local_path) }}"
  delegate_to: localhost
  run_once: true

- name: Revoke root token.
  block:
    - name: Retrieve client token.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/userpass/login/{{ vault_admin_username }}"
        method: POST
        body_format: json
        body: '{ "password": "{{ admin_password }}" }'
        status_code:
          - 200
          - 204
        validate_certs: false
      register: vault_admin_login_response

    - name: Set fact of client token.
      ansible.builtin.set_fact:
        admin_token: "{{ vault_admin_login_response.json.auth.client_token }}"

    - name: Revoke root token.
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/auth/token/revoke"
        method: POST
        headers:
          X-Vault-Token: "{{ admin_token }}"
        body_format: json
        body: '{ "token": "{{ vault_initial_root_token.stdout }}" }'
        status_code:
          - 200
          - 204
        validate_certs: false
      register: vault_revoke_response
  delegate_to: "{{ groups['vault_servers'] | first }}"
  when: ansible_hostname in groups['vault_servers']
  run_once: true
